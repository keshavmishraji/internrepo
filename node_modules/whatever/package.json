{
  "_args": [
    [
      "whatever",
      "/home/kenny/testingcode"
    ]
  ],
  "_from": "whatever@latest",
  "_id": "whatever@6000.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/whatever",
  "_npmUser": {
    "email": "mogden@gmail.com",
    "name": "maxogden"
  },
  "_npmVersion": "1.3.21",
  "_phantomChildren": {},
  "_requested": {
    "name": "whatever",
    "raw": "whatever",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/whatever/-/whatever-6000.0.0.tgz",
  "_shasum": "ba8880410873ba73b1d3204400165e59ad64ec7d",
  "_shrinkwrap": null,
  "_spec": "whatever",
  "_where": "/home/kenny/testingcode",
  "author": {
    "name": "substack"
  },
  "dependencies": {},
  "description": "the premier task runner for node point javascript",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "ba8880410873ba73b1d3204400165e59ad64ec7d",
    "tarball": "https://registry.npmjs.org/whatever/-/whatever-6000.0.0.tgz"
  },
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "maxogden",
      "email": "mogden@gmail.com"
    }
  ],
  "name": "whatever",
  "optionalDependencies": {},
  "readme": "# why `./task.js`?\n\nOne word: task automation. It's basically zero effort and you can use the [./task.js package manager](https://npmjs.org) to handle any repetitive tasks. You can use `./task.js` to automate everything with minimum effort.\n\n`./task.js` provides the structure, order, and authority that you as a developer so desperately crave.\n`./task.js` will also take responsibility for your actions if you need it to. It's what everybody is using now.\n`./task.js` is the new hotness. It's all about `./task.js` now, just like that.\n\n\nThis is compared to [npm run/bash scripts](https://gist.github.com/substack/7819530), which are:\n* scary\n* not cross-platformant for deploying to windows server 2003\n* old news. Nobody uses bash these days.\n\n# getting started\n\nTo install `./task.js`, first install [node.js](http://nodejs.org).\n\nNow you'll need to generate some scaffolding for your project.\n\nYou can use the following scaffold generator:\n\n``` js\n#!/usr/bin/env node\nvar fs = require('fs');\n['browser','static','style'].forEach(fs.mkdir);\nfs.writeFile('task.js', '#!/usr/bin/env node\\n', { mode: 0775 });\n```\n\nbrowser code goes in `browser/`, stylesheets go in `style/`, static assets go in `static/`.\nYou are free to change these directory names to be whatever you want. Just modify the scaffold generator.\n\nNow you can get started writing your `./task.js` script. Here is an example script that uses the [browserify](http://browserify.org), [watchify](https://npmjs.org/package/watchify), and [catw](https://npmjs.org/package/catw) plugins published to the [./task.js plugin repository](https://npmjs.org/):\n\n``` js\n#!/usr/bin/env node\n\nvar fs = require('fs');\nvar browserify = require('browserify');\nvar watchify = require('watchify');\nvar catw = require('catw');\n\nvar cmd = process.argv[2];\nif (cmd === 'build') build({ watch: false })\nelse if (cmd === 'watch') build({ watch: true })\nelse usage(1)\n\nfunction build (opts) {\n  var js = opts.watch ? watchify : browserify;\n  js('./browser/main.js').bundle()\n    .pipe(fs.createWriteStream('static/bundle.js'))\n  ;\n  \n  var css = catw('style/*.css', { watch: opts.watch });\n  css.on('stream', function (stream) {\n    stream.pipe(fs.createWriteStream('static/bundle.css'));\n  });\n}\n\nfunction usage (code) {\n  console.error('usage: ./task.js { build | watch }');\n  if (code) process.exit(code);\n}\n```\n\n# install\n\nTo install `./task.js`, first install [node.js](http://nodejs.org).",
  "readmeFilename": "readme.md",
  "scripts": {},
  "version": "6000.0.0"
}
